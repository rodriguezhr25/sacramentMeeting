// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SacramentalApp.Data;

#nullable disable

namespace SacramentalApp.Migrations
{
    [DbContext(typeof(SacramentalAppContext))]
    [Migration("20241214035306_AddMeetingDetails")]
    partial class AddMeetingDetails
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SacramentalApp.Models.Meeting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Acknowledgements")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Announcements")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("Attendance")
                        .HasColumnType("int");

                    b.Property<string>("CloseningPrayer")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("CloseningSongId")
                        .HasColumnType("int");

                    b.Property<string>("ConductingLeader")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IntermediateHymnId")
                        .HasColumnType("int");

                    b.Property<string>("OpeningPrayer")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("OpeningSongId")
                        .HasColumnType("int");

                    b.Property<int?>("SacramentHymnId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CloseningSongId");

                    b.HasIndex("IntermediateHymnId");

                    b.HasIndex("OpeningSongId");

                    b.HasIndex("SacramentHymnId");

                    b.ToTable("Meeting");
                });

            modelBuilder.Entity("SacramentalApp.Models.MusicSelection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("HymnNumber")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("MusicSelection");
                });

            modelBuilder.Entity("SacramentalApp.Models.Speech", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MeetingId")
                        .HasColumnType("int");

                    b.Property<string>("NameSpeaker")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Topic")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("MeetingId");

                    b.ToTable("Speech");
                });

            modelBuilder.Entity("SacramentalApp.Models.Meeting", b =>
                {
                    b.HasOne("SacramentalApp.Models.MusicSelection", "CloseningSong")
                        .WithMany()
                        .HasForeignKey("CloseningSongId");

                    b.HasOne("SacramentalApp.Models.MusicSelection", "IntermediateHymn")
                        .WithMany()
                        .HasForeignKey("IntermediateHymnId");

                    b.HasOne("SacramentalApp.Models.MusicSelection", "OpeningSong")
                        .WithMany()
                        .HasForeignKey("OpeningSongId");

                    b.HasOne("SacramentalApp.Models.MusicSelection", "SacramentHymn")
                        .WithMany()
                        .HasForeignKey("SacramentHymnId");

                    b.Navigation("CloseningSong");

                    b.Navigation("IntermediateHymn");

                    b.Navigation("OpeningSong");

                    b.Navigation("SacramentHymn");
                });

            modelBuilder.Entity("SacramentalApp.Models.Speech", b =>
                {
                    b.HasOne("SacramentalApp.Models.Meeting", null)
                        .WithMany("Speeches")
                        .HasForeignKey("MeetingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SacramentalApp.Models.Meeting", b =>
                {
                    b.Navigation("Speeches");
                });
#pragma warning restore 612, 618
        }
    }
}
